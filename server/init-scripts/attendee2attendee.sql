-- Custom types
drop type public.message_status;
create type public.message_status as enum ('UNREAD', 'READ');

-- ATTENDEES
create table public.attendees (
  id                        uuid references auth.users not null,
  full_name                 text not null,
  email		                  text,
  company                   text,
  title                     text,
  pic_url	                  text,
  bio	                      text,
  idp_user_id               int,
  is_online                 boolean,
  social_info               jsonb,
  badges_info               jsonb,
  public_profile_show_email boolean,
  primary key (id)
);

--ACCESSES
create table public.accesses (
  id 			            bigint generated by default as identity primary key,
  attendee_id 	      uuid references public.attendees not null,
  inserted_at 	      timestamp without time zone DEFAULT timezone('utc'::text, now()) not null,
  updated_at 	        timestamp without time zone DEFAULT timezone('utc'::text, now()) not null,
  summit_id 	        int,
  current_url  	      text not null,
  attendee_ip	        text not null,
  browser_user_agent  text
);

--ACCESS_TRACKING
create table public.access_tracking (
  id                  bigint generated by default as identity primary key,
  access_id 	        bigint references public.accesses not null,
  inserted_at 	      timestamp without time zone DEFAULT timezone('utc'::text, now()) not null,
  summit_id 	        int,
  url	                text not null,
  attendee_ip 	      text not null,
  browser_user_agent  text
);

comment on table public.access_tracking is 'Access tracking history';

--DIRECT_MESSAGE_NOTIFICATIONS
create table public.message_notifications (
  from_attendee_id    uuid references public.attendees not null,
  to_attendee_id      uuid references public.attendees not null,
  summit_id 	        int,
  last_message        text not null,
  status              message_status default 'UNREAD'::public.message_status,
  inserted_at 	      timestamp without time zone DEFAULT timezone('utc'::text, now()) not null,
  updated_at 	        timestamp without time zone DEFAULT timezone('utc'::text, now()) not null,
  primary key (from_attendee_id, to_attendee_id)
);

comment on table public.message_notifications is 'Direct message notifications';

--updated_at auto refresh
create extension if not exists moddatetime schema extensions;

create trigger handle_updated_at before update on accesses 
  for each row execute procedure moddatetime (updated_at);

-- alter table public.attendees enable row level security;
-- alter table public.accesses enable row level security;
-- alter table public.access_tracking enable row level security;

-- create policy "Allow logged-in read access" on public.accesses for select using ( auth.role() = 'authenticated' );
-- create policy "Allow individual insert access" on public.accesses for insert with check ( auth.uid() = id );
-- create policy "Allow individual update access" on public.accesses for update using ( auth.uid() = id );

-- create policy "Allow logged-in full access" on public.access_tracking for all using ( auth.role() = 'authenticated' );
-- create policy "Allow logged-in read access" on public.access_tracking using ( auth.role() = 'authenticated' );
-- create policy "Allow individual insert access" on public.access_tracking for insert with check ( auth.uid() = user_id );
-- create policy "Allow individual update access" on public.access_tracking for update using ( auth.uid() = user_id );

-- Send "previous data" on change 
alter table public.attendees replica identity full; 
alter table public.accesses replica identity full; 
alter table public.access_tracking replica identity full;

CREATE TABLE public.summit_attendee_roles (
  id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  inserted_at timestamp with time zone DEFAULT timezone('utc'::text, now()) NOT NULL,
  updated_at timestamp with time zone DEFAULT timezone('utc'::text, now()) NOT NULL,
  summit_id bigint NOT NULL,
  summit_event_id bigint,
  idp_user_id bigint NOT NULL,
  member_id bigint NOT NULL,
  full_name text NOT NULL
);

CREATE TABLE public.summit_getstream_apps (
   summit_id bigint NOT NULL,
   api_key text NOT NULL,
   api_secret text NOT NULL
);


COMMENT ON TABLE public.summit_attendee_roles is 'Attendee Roles (QA/Help)';

COMMENT ON TABLE public.summit_getstream_apps is 'getstream.io applications';


CREATE UNIQUE INDEX IDX_SUMMIT ON public.summit_getstream_apps (summit_id);

CREATE UNIQUE INDEX IDX_SUMMIT_EVENT_MEMBER ON public.summit_attendee_roles (summit_id, summit_event_id, member_id);
